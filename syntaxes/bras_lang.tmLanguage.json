{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "BrasLang",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [
				{
                    "name": "comment.line.double-slash.bras_lang",
                    "match": "#.*$"
                },
				{
					"name": "keyword.control.bras_lang",
					"match": "\\b(loop|ret|fun|if|else|elif|ex|end)\\b"
				},
				{
                    "name": "keyword.declaration.bras_lang",
                    "match": "\\b(auto|const|int|str|float|obj|vec)\\b"
                },
				{
					"name": "entity.name.function.bras_lang",
					"match": "\\b(^[a-z]+([A-Z][a-z0-9]*)*$)|(write|input)\\b",
					"captures": {
						"0": {
							"name": "entity.name.function.bras_lang"
						}
					}
				},
				{
					"name": "meta.function.bras_lang",
					"match": "\\bfun\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\b",
					"captures": {
						"1": {
							"name": "entity.name.function.bras_lang"
						}
					},
					"patterns": [
						{
							"include": "#parameters"
						}
					]
				},
				{
					"name": "meta.function.parameters.bras_lang",
					"match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b(?=\\s*,|\\s*$)",
					"captures": {
						"0": {
							"name": "variable.parameter.bras_lang"
						}
					}
				},
				{
					"name": "meta.function.argument.bras_lang",
					"match": "\\bwrite\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\b(?=\\s*,|\\s*$)",
					"captures": {
						"1": {
							"name": "variable.argument.bras_lang"
						}
					}
				},
				{
					"name": "meta.function.argument.bras_lang",
					"match": "\\input\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\b(?=\\s*,|\\s*$)",
					"captures": {
						"1": {
							"name": "variable.argument.bras_lang"
						}
					}
				},
				{
					"name": "meta.function.argument.bras_lang",
					"match": "\\tomb\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\b(?=\\s*,|\\s*$)",
					"captures": {
						"1": {
							"name": "variable.argument.bras_lang"
						}
					}
				},												
				{
					"name": "keyword.operator.assignment.bras_lang",
					"match": "->"
				},				
                {
                    "name": "constant.language.boolean.bras_lang",
                    "match": "\\b(true|false)\\b"
                },
				{
                    "name": "variable.bras_lang",
                    "match": "\\b[a-z0-9]+(_[a-z0-9]+)*\\b",
                    "captures": {
                        "0": {
                            "name": "variable.name.bras_lang"
                        }
                    }
                },
                {
                    "name": "invalid.variable.special-char.bras_lang",
                    "match": "[$#%*()_+{}(*&Â¨%@!?]+$"
                },
				{
					"name": "string.quoted.double.bras_lang",
					"begin": "\"",
					"end": "\"",
					"patterns": [
						{
							"name": "variable.parameter.bras_lang",
							"match": "\\$[a-zA-Z_][a-zA-Z0-9_]*"
						},
						{
							"name": "constant.character.escape.bras_lang",
							"match": "\\\\."
						}
					]
				},
				{
					"name": "string.quoted.single.bras_lang",
					"begin": "'",
					"end": "'"
				}				
			]
		},
		"strings": {
			"name": "string.quoted.double.bras_lang",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.bras_lang",
					"match": "\\\\."
				}
			]
		}
	},
	"scopeName": "source.bras_lang"
}
